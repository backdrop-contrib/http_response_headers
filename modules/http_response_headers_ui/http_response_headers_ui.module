<?php

/**
 * @file
 * Contains definitions.
 */


/**
 * Implements hook_help().
 */
function http_response_headers_help($path, $arg) {
  switch ($path) {
    case 'admin/help#http_response_headers':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The HTTP response headers module allows you to create header rules, which are rendered to one or more pages of a website. The <a href="@http_response_headers">HTTP response header administration page</a> provides an interface to manage header rules.', array('@http_response_headers' => url('admin/config/system/http-response-headers/settings'))) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configure HTTP headers') . '</dt>';
      $output .= '<dd>' . t('Users with the <em>Administer blocks</em> permission can configure the list of allowed headers to create rules. Headers list can be configured from <a href="@header-config">HTTP response header settings page</a>.', array('@header-config' => url('admin/config/system/http-response-headers/settings'))) . '</dd>';
      $output .= '<dt>' . t('Creating header rules') . '</dt>';
      $output .= '<dd>' . t('Users with the <em>administer http response headers</em> permission can <a href="@header-add">add header rules</a>, which are then listed on the <a href="@header-list">HTTP response headers administration page</a>.', array('@header-list' => url('admin/config/system/http-response-headers'), '@header-add' => url('admin/config/system/http-response-headers/add'))) . '</dd>';
      $output .= '<dt>' . t('Controlling visibility') . '</dt>';
      $output .= '<dd>' . t('Header rules can be configured to be applied only on certain pages, only to users of certain roles, or only on pages displaying certain <a href="@content-type">content types</a>.', array('@content-type' => url('admin/structure/types'), '@user' => url('user'))) . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'admin/config/system/http-response-headers':
      return '<p>' . t('The allowed headers can be configured from  <a href="@header_url">configuration</a>', array('@header_url' => url('admin/config/system/http-response-headers/settings'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function http_response_headers_ui_menu() {
  $items['admin/config/system/http-response-headers/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('http_response_headers_ui_settings_form'),
    'access arguments' => array('administer http response headers'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'http_response_headers_ui.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function http_response_headers_ui_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_permission().
 */
function http_response_headers_ui_permission() {
  return array(
    'administer http response headers' => array(
      'title' => t('Administer HTTP response headers'),
    ),
    'Add http response headers' => array(
      'title' => t('Add HTTP response headers'),
    ),
  );
}

/**
 * Menu callback for header rule configuration.
 */
function http_response_headers_ui_form(&$form, &$form_state) {
  $rule = $form_state['item'];

  $form['description'] = array(
    '#title' => t('Description'),
    '#type' => 'textfield',
    '#default_value' => $rule->description,
    '#description' => t('The human-readable name of this rule. It is recommended that this name begin with a capital letter and contain only letters, numbers, and spaces. This name must be unique.'),
    '#disabled' => isset($rule->machine_name) ? TRUE : FALSE,
    '#required' => TRUE,
    '#size' => 30,
  );
  $form['machine_name'] = array(
    '#type' => 'machine_name',
    '#default_value' => $rule->machine_name,
    '#maxlength' => 32,
    '#disabled' => isset($rule->machine_name) ? TRUE : FALSE,
    '#machine_name' => array(
      'exists' => 'http_response_headers_ui_rule_exists',
      'source' => array('description'),
      'label' => t('Machine name'),
      'replace_pattern' => '[^a-z0-9_]+',
      'replace' => '_',
    ),
    '#description' => t('A unique machine-readable name for this rule. It must only contain lowercase letters, numbers, and underscores.'),
  );
  $form['settings']['header'] = array(
    '#type' => 'select',
    '#title' => t('HTTP header'),
    '#description' => '',
    '#default_value' => $rule->header,
    '#options' => variable_get('http_response_headers_ui_allowed_headers', array()),
    '#empty_option' => t('Select a header'),
    '#required' => TRUE,
  );
  $form['settings']['header_value'] = array(
    '#type' => 'textfield',
    '#title' => t('HTTP header value'),
    '#maxlength' => 64,
    '#description' => '',
    '#default_value' => $rule->header_value,
    '#required' => TRUE,
  );

  // Visibility settings.
  $form['visibility_title'] = array(
    '#type' => 'item',
    '#title' => t('Visibility settings'),
  );
  $form['visibility'] = array(
    '#type' => 'vertical_tabs',
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'http_response_headers_ui') . '/http_response_headers_ui.js'),
    ),
  );

  // Per-path visibility.
  $form['visibility']['path'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pages'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'visibility',
    '#weight' => 0,
  );

  $options = array(
    HTTP_RESPONSE_HEADERS_VISIBILITY_NOTLISTED => t('All pages except those listed'),
    HTTP_RESPONSE_HEADERS_VISIBILITY_LISTED => t('Only the listed pages'),
  );
  $description = t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array(
    '%blog' => 'blog',
    '%blog-wildcard' => 'blog/*',
    '%front' => '<front>',
  ));

  $form['visibility']['path']['visibility'] = array(
    '#type' => 'radios',
    '#title' => t('Set header on specific pages'),
    '#options' => $options,
    '#default_value' => $rule->visibility,
  );

  $form['visibility']['path']['pages'] = array(
    '#type' => 'textarea',
    '#title' => '<span class="element-invisible">' . t('Pages') . '</span>',
    '#default_value' => $rule->pages,
    '#description' => $description,
  );

  // Per-node-type visibility.
  $default_type_options = array();
  if (!empty($rule->types)) {
    $default_type_options = explode(',', $rule->types);
  }
  $form['visibility']['node_type'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content types'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'visibility',
    '#weight' => 5,
  );
  $form['visibility']['node_type']['types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Set header for specific content types'),
    '#default_value' => $default_type_options,
    '#options' => node_type_get_names(),
    '#description' => t('Set this header only on pages that display content of the given type(s). If you select no types, there will be no type-specific limitation.'),
  );

  // Per-role visibility.
  $default_role_options = array();
  if (!empty($rule->roles)) {
    $default_role_options = explode(',', $rule->roles);
  }
  $role_options = array_map('check_plain', user_roles());
  $form['visibility']['role'] = array(
    '#type' => 'fieldset',
    '#title' => t('Roles'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'visibility',
    '#weight' => 10,
  );
  $form['visibility']['role']['roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Set header for specific roles'),
    '#default_value' => $default_role_options,
    '#options' => $role_options,
    '#description' => t('Set this header only for the selected role(s). If you select no roles, the rule will be visible to all users.'),
  );

  // Get rid of default element from export_ui.
  unset($form['info']['machine_name']);

}


/**
 * Form validation handler for http_response_headers_ui_rule_form().
 */
function http_response_headers_ui_form_validate($form, &$form_state) {

}

/**
 * Form submission handler for http_response_headers_ui_rule_form().
 */
function http_response_headers_ui_form_submit($form, &$form_state) {
  $form_state['item']->updateRoles($form_state['values']['roles']);
  $form_state['item']->updateTypes($form_state['values']['types']);

  unset($form_state['values']['roles']);
  unset($form_state['values']['types']);
}

/**
 * Returns whether a rule with given machine name exists.
 *
 * @see http_response_headers_ui_rule_form()
 */
function http_response_headers_ui_rule_exists($machine_name) {
  return (bool) db_query_range('SELECT 1 FROM {http_response_headers} WHERE machine_name = :machine_name', 0, 1, array(':machine_name' => $machine_name))->fetchField();
}
