<?php
/**
 * @file
 * Contains hooks and definitions for the HTTP Response Headers module.
 */

/**
 * Sets this header on every page except the listed pages.
 */
define('HTTP_RESPONSE_HEADERS_VISIBILITY_NOTLISTED', 0);

/**
 * Sets this header on only the listed pages.
 */
define('HTTP_RESPONSE_HEADERS_VISIBILITY_LISTED', 1);

/**
 * Cache bin for HTTP headers.
 */
define('HTTP_RESPONSE_HEADERS_CACHE_BIN', 'cache_http_response_headers');

/**
 * Implements hook_menu().
 */
function http_response_headers_menu() {
  $items['admin/config/system/http-response-headers'] = array(
    'title' => 'HTTP response headers',
    'description' => t('Specify HTTP response headers to be included on pages.'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('http_response_headers_settings_form'),
    'access arguments' => array('administer http response headers'),
    'file' => 'http_response_headers.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function http_response_headers_permission() {
  return array(
    'administer http response headers' => array(
      'title' => t('Administer HTTP response headers'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function http_response_headers_init() {

  // Exclude pages on global exclude list.
  if (http_response_headers_exclude_path()) {
    return;
  }

  $rules = http_response_headers_get_current_page_rules();
  foreach ($rules as $rule) {
    $header = $rule['header'];
    $header_value = $rule['header_value'];

    // Handle custom callback cases.
    switch (strtolower($header)) {
      case 'expires':
        $header_value = http_response_headers_expires_callback($header_value);
        break;

      case 'last-modified':
        $header_value = http_response_headers_last_modified_callback($header_value);
        break;
    }

    // Set response header.
    backdrop_add_http_header($header, $header_value);
  }
}

/**
 * Implements hook_flush_cache().
 */
function http_response_headers_flush_caches() {
  return array('cache_http_response_headers');
}

/**
 * Implements hook_config_info().
 */
function http_response_headers_config_info() {
  $prefixes['http_response_headers.settings'] = array(
    'label' => t('HTTP Response Headers settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Provides applicable rules for current page.
 *
 * @return mixed
 *   An array of matching header rules indexed with rule ID, NULL otherwise.
 */
function http_response_headers_get_current_page_rules() {
  global $user;

  // Convert the Backdrop path to lowercase.
  $path = backdrop_strtolower(backdrop_get_path_alias());

  // Cache key for page.
  $cid = 'http_response_headers_page:' . _http_response_headers_get_page_cache_id($path);

  // Get rules from cache for this page, if exist.
  if ($rule_cached = cache_get($cid, HTTP_RESPONSE_HEADERS_CACHE_BIN)) {
    return $rule_cached->data;
  }

  $rules = config_get('http_response_headers.settings', 'rules');

  foreach ($rules as $machine_name => $rule) {

    // If a rule has no roles associated, it is displayed for every role.
    // For rules with roles associated, if none of the user's roles matches
    // the settings from this rule, remove it from the rule list.
    if (!empty($rule['roles']) && !array_intersect(explode(',', $rule['roles']), array_keys($user->roles))) {
      // No match.
      unset($rules[$machine_name]);
      continue;
    }

    $enabled = TRUE;
    $has_pages = !empty($rule['pages']);
    // Limited visibility rules must list at least one page.
    if ($rule['visibility'] == HTTP_RESPONSE_HEADERS_VISIBILITY_LISTED && $has_pages === FALSE) {
      $enabled = FALSE;
    }

    if (!$enabled) {
      unset($rules[$machine_name]);
      continue;
    }

    // Match path if necessary.
    if ($has_pages) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = backdrop_strtolower($rule['pages']);
      $rule_visibility = $rule['visibility'];
      if ($rule_visibility <= HTTP_RESPONSE_HEADERS_VISIBILITY_LISTED) {
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = backdrop_match_path($path, $pages);
        $current_path = request_path();
        if ($path != $current_path) {
          $page_match = $page_match || backdrop_match_path($current_path, $pages);
        }
        // When $rule['visibility'] has a value of 0
        // (HTTP_RESPONSE_HEADERS_VISIBILITY_NOTLISTED),the header is set on
        // all pages except those listed in $rule['pages'].
        // When set to 1 (HTTP_RESPONSE_HEADERS_VISIBILITY_LISTED), it is set
        // only on those pages listed in $rule['pages'].
        $page_match = !($rule_visibility xor $page_match);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }
    if (!$page_match) {
      unset($rules[$machine_name]);
    }

    // Match content types.
    $node = menu_get_object();
    $node_types = node_type_get_types();
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2)) {
      $node_add_arg = strtr(arg(2), '-', '_');
    }
    // If a rule has no node types associated, it is displayed for every type.
    // For rules with node types associated, if the node type does not match
    // the settings from this rule, remove it from the list.
    if ($rule_node_types = $rule['types']) {
      if (!empty($node)) {
        // This is a node or node edit page.
        if (!in_array($node->type, $rule_node_types)) {
          // This rule should not be set for this node type.
          unset($rules[$machine_name]);
          continue;
        }
      }
      elseif (isset($node_add_arg) && isset($node_types[$node_add_arg])) {
        // This is a node creation page.
        if (!in_array($node_add_arg, $rule_node_types)) {
          // This header should not be set for this node type.
          unset($rules[$machine_name]);
          continue;
        }
      }
      else {
        // This is not a node page, remove the rule.
        unset($rules[$machine_name]);
        continue;
      }
    }
  }

  // Set it to cache to use next time.
  cache_set($cid, $rules, HTTP_RESPONSE_HEADERS_CACHE_BIN);

  return $rules;
}

/**
 * Clears the header rule per page cache.
 */
function http_response_headers_cache_reset() {
  cache_clear_all('http_response_headers_page:', HTTP_RESPONSE_HEADERS_CACHE_BIN, TRUE);
}

/**
 * Process callback for expires header.
 *
 * @param int $seconds
 *   Number of seconds to expire header.
 *
 * @return string
 *   String of formatted date time.
 */
function http_response_headers_expires_callback($seconds = 0) {
  return gmdate(DATE_RFC7231, strtotime('+' . $seconds . ' second'));
}

/**
 * Process callback for last modified header.
 *
 * @param int $seconds
 *   Number of seconds to modified header.
 *
 * @return string
 *   String of formatted date time.
 */
function http_response_headers_last_modified_callback($seconds = 0) {
  return gmdate(DATE_RFC1123, strtotime('+' . $seconds . ' second'));
}

/**
 * Helper to verify given path in exclude list.
 *
 * Path can be any backdrop internal path.
 *
 * @param string|null $path
 *   A string path. Current path used, if no path specified explicitly.
 *
 * @return bool
 *   TRUE if path in exclude list, FALSE otherwise.
 */
function http_response_headers_exclude_path($path = NULL) {
  if (!$path) {
    // Convert the Backdrop path to lowercase.
    $path = backdrop_strtolower(backdrop_get_path_alias());
  }

  if ($pages = config_get('http_response_headers.settings', 'exclude_pages')) {
    $pages = backdrop_strtolower($pages);
    // Compare the lowercase internal and lowercase path alias (if any).
    return backdrop_match_path($path, $pages);
  }
  return FALSE;
}

/**
 * Helper to format cache key.
 *
 * @param string $cache_key
 *   A string key.
 *
 * @return string
 *   A updated hash key value.
 */
function _http_response_headers_get_page_cache_id($cache_key) {
  // Don't calculate roles for anonymous user.
  if (!user_is_anonymous()) {
    global $user;
    $roles = array_keys($user->roles);
    asort($roles);
    // Cache by path and user roles.
    $cache_key .= implode(':', $roles);
  }
  return md5($cache_key);
}
